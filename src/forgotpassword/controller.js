import User from "../user/model";
import nodemailer from "nodemailer";
import crypto from "crypto";
import bcryptjs from "bcryptjs";
import dotenv from "dotenv";

dotenv.config();

// C·∫•u h√¨nh g·ª≠i email
const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: {
        user: process.env.EMAIL_USERNAME,
        pass: process.env.EMAIL_PASSWORD,
    },
});

// üìå G·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
export const forgotPassword = async (req, res) => {
    const { email } = req.body;

    try {
        const user = await User.findOne({ email });

        if (!user) {
            return res.status(400).render("forgot-password", { message: "Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng!" });
        }

        // T·∫°o m√£ token ng·∫´u nhi√™n
        const token = crypto.randomBytes(20).toString("hex");

        // L∆∞u token v√†o database
        user.resetPasswordToken = token;
        user.resetPasswordExpires = Date.now() + 3600000; // Token h·∫øt h·∫°n sau 1 gi·ªù
        await user.save();

        // G·ª≠i email ch·ª©a link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
        const resetUrl = `http://localhost:8080/reset-password/${token}`;
        const mailOptions = {
            from: process.env.EMAIL_USERNAME,
            to: email,
            subject: "Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u",
            text: `B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u. Nh·∫•p v√†o link b√™n d∆∞·ªõi ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u: \n\n ${resetUrl} \n\n Li√™n k·∫øt n√†y s·∫Ω h·∫øt h·∫°n sau 1 gi·ªù.`,
        };

        await transporter.sendMail(mailOptions);

        res.render("forgot-password", { message: "Email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i! Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞." });
    } catch (error) {
        console.error("L·ªói khi g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:", error);
        res.status(500).render("forgot-password", { message: "L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau!" });
    }
};

// üìå X√°c minh token v√† render form ƒë·ªïi m·∫≠t kh·∫©u
export const renderResetPassword = async (req, res) => {
    try {
        const { token } = req.params;
        const user = await User.findOne({ resetPasswordToken: token, resetPasswordExpires: { $gt: Date.now() } });

        if (!user) {
            return res.status(400).render("reset-password", { message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!", token: null });
        }

        res.render("reset-password", { token, message: "" });
    } catch (error) {
        console.error("L·ªói khi x√°c minh token:", error);
        res.status(500).send("ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i sau!");
    }
};

// üìå C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
export const resetPassword = async (req, res) => {
    try {
        const { token } = req.params;
        const { oldPassword, newPassword, confirmPassword } = req.body;

        // Ki·ªÉm tra xem m·∫≠t kh·∫©u m·ªõi c√≥ kh·ªõp kh√¥ng
        if (newPassword !== confirmPassword) {
            return res.render("reset-password", {
                message: "M·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp!",
                messageType: "error",
                token
            });
        }

        // T√¨m ng∆∞·ªùi d√πng c√≥ token h·ª£p l·ªá
        const user = await User.findOne({ resetPasswordToken: token, resetPasswordExpires: { $gt: Date.now() } });

        if (!user) {
            return res.render("reset-password", {
                message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!",
                messageType: "error",
                token: null
            });
        }

        // Ki·ªÉm tra m·∫≠t kh·∫©u c≈©
        const isMatch = await bcryptjs.compare(oldPassword, user.password);
        if (!isMatch) {
            return res.render("reset-password", {
                message: "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng!",
                messageType: "error",
                token
            });
        }

        // Ki·ªÉm tra xem m·∫≠t kh·∫©u m·ªõi c√≥ gi·ªëng m·∫≠t kh·∫©u c≈© kh√¥ng
        const isSameAsOld = await bcryptjs.compare(newPassword, user.password);
        if (isSameAsOld) {
            return res.render("reset-password", {
                message: "M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c tr√πng v·ªõi m·∫≠t kh·∫©u c≈©!",
                messageType: "error",
                token
            });
        }

        // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
        user.password = await bcryptjs.hash(newPassword, 10);
        user.resetPasswordToken = undefined;
        user.resetPasswordExpires = undefined;

        await user.save();

        res.redirect("/signin?message=ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p.");
    } catch (error) {
        console.error("L·ªói khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:", error);
        res.status(500).render("reset-password", {
            message: "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i sau!",
            messageType: "error",
            token: null
        });
    }
};

